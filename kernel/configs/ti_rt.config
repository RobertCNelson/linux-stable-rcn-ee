##################################################
# Real Time Linux Configs
##################################################

CONFIG_EXPERT=y
CONFIG_PREEMPT=y
CONFIG_PREEMPT_RT=y

# max out the kernel's tick
#
# Ideally this is a balance. Increasing this means we
# spend more time in the scheduler deciding what we
# should do and less time on doing it however this
# also minimizes the time spent running a low-priority
# task while a real-time priority task is awake
CONFIG_HZ_1000=y
CONFIG_HZ=1000

# omit scheduling ticks for CPUs with a single task
#
# If a CPU has only one runnable task there is little
# need to contiguously interrupt it as there is no other
# task for it to switch to. This comes at the cost of having
# to offload the CPU's RCU callbacks to another CPU with
# an active tick.
#
# For workloads with many short-lived tasks HZ_PERIODIC may
# be the better selection as adaptive-tick modes does not
# come without tradeoffs. For example the user-to kernel
# transitions are slightly more expensive
CONFIG_NO_HZ_FULL=y
CONFIG_CONTEXT_TRACKING_USER=y

# track our RCU callbacks
#
# there are situations in which idle CPUs cannot enter
# a dynctick or adaptive-tick mode, the most common reason
# being when a CPU has RCU callbacks pending. However boosting
# this thread will compete with the realtime task. So let's
# disable this for now.
CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=n
CONFIG_RCU_BOOST=n

# memory management tuning
#
# The SLUB allocator (default allocator used by the kernel)
# uses per-cpu caches to accelerate allocation and freeing of
# objects local to that processor. This comes at the cost of
# more indeterminism when freeing. Remove this to remove jitter
CONFIG_SLUB_CPU_PARTIAL=n

# RCU system tuning
#
# The scheduler heavily utilizes the RCU subsystem to avoid
# large amounts of locking that would be needed otherwise.
# Removing this is showing to improve the am62x latency numbers
# using stress-ng and cyclictest.
CONFIG_RCU_TRACE=n

# remove have kmemleak support
#
# Even-though the kmemleak detector is disabled, removing it
# completely from the build is showing improvements for the
# am62x latency numbers when monitoring with cyclictest and
# stress-ng to generate a synthetic background load.
CONFIG_HAVE_DEBUG_KMEMLEAK=n

# Disable debug features

# CoreSight debug and trace drivers are not typically used in
# production. Keep them disabled by default. Users can enable
# when debugging is needed.
CONFIG_CORESIGHT=n

# Remove support for symbolic crash dumps. These are useful
# while debugging and not must have for production. This also
# helps reduce kernel size.
CONFIG_KALLSYMS=n

# Disable profiling support. Not needed on a production system.
CONFIG_PROFILING=n

# Disable support for performance events. These are used only
# for development and debug. Not needed on production system.
CONFIG_PERF_EVENTS=n

# Disable eBPF support which is typically used for tracing and
# profiling. This prevents users from loading eBPF programs
# but BPF usage within the kernel should still work. Disabling
# JIT compiler will slow down packet filtering.
CONFIG_BPF_SYSCALL=n
CONFIG_BPF_JIT=n

# Fine granularity IRQ time accounting is not needed on a
# production system.
CONFIG_IRQ_TIME_ACCOUNTING=n

# Disable ARMv8.1+ architecture featurres. TI processors are based
# on ARMv8.0, and these feaures are not applicable. If enabled
# they increase worst case latency from 41 usec to 83 usec when
# tested on AM62x silicon with 1 hour cyclictest.
CONFIG_ARM64_HW_AFDBM=n
CONFIG_ARM64_PAN=n
CONFIG_ARM64_USE_LSE_ATOMICS=n
CONFIG_ARM64_RAS_EXTN=n
CONFIG_ARM64_CNP=n
CONFIG_ARM64_PTR_AUTH=n
CONFIG_ARM64_AMU_EXTN=n
CONFIG_ARM64_TLB_RANGE=n
CONFIG_ARM64_BTI=n
CONFIG_ARM64_E0PD=n

# Disable group scheduling. We already disable RT_GROUP_SCHEDULING since
# there is no way to meaningfully use it (see kernel/configs/ti_arm64_prune.config).
# Disable group scheduling as such on RT kernel - the main focus anyway
# is on RT tasks there.
CONFIG_SCHED_AUTOGROUP=n

# Disable symmetric multi-threading scheduler. Its not used on ARM64
CONFIG_SCHED_SMT=n

# Kernel stack base address randomization helps frustate attacks that depend on
# stack address determinism. But it has an impact on RT latency. Using 1 hour
# cyclictest on AM62x, it was found to increase worst case latency from 50 usecs
# to 69 usecs. For RT kernel alone, be biased towards better latency over extra
# security.
CONFIG_RANDOMIZE_KSTACK_OFFSET=n

# Kernel can apply read-only permissions to linear aliases of VM areas. This
# provides extra layer of protection against advertent/inadvertent modification
# of read-only data through the linear alias. While its a useful security
# feature, it has performance and RT latency impact. When testing on AM62x
# hardware using cyclictest running for 1 hour, the worst case latency increased
# from 50 usecs to 58 usecs when this feature was enabled.
CONFIG_RODATA_FULL_DEFAULT_ENABLED=n

# Kernel page table isolation (KAISER)  unmaps kernel page tables when in EL0
# to mitigate speculation attacks that enable privilege bypass. Note that CPUs
# used on K3 SoCs are not impacted by meltdown vulnerability (CVE-2017-5754).
# Using a 6 hour cyclictest, enabling KAISER was seen to increase worst case
# latency by about 20 usecs (increase from 50 usecs to 70 usecs on AM62x hardware
# using cutdown configuration designed to minimizeRT latency)
CONFIG_UNMAP_KERNEL_AT_EL0=n

# We have little need for page pool statistics. Because this has a impact for the
# CPU when allocating and recycling pages just disable it.
CONFIG_PAGE_POOL_STATS=n

# While process accounting statistics is useful, the number of processes and
# all the accounting needed for them has an affect on RT reponsiveness.
CONFIG_BSD_PROCESS_ACCT=n
CONFIG_TASKSTATS=n

# Disable control groups which are not minimum required by systemd and docker.
# These can be enabled as per need of end application.
#
# Keeping device control group enabled as docker example does not start without
# it.
#
# Having these enabled has an impact on RT latency. Using AM62x, using cyclictest,
# a 40 usecs latency impact was seen (worst case latency went from 50 usecs to 90
# usecs)
CONFIG_MEMCG=n
CONFIG_BLK_CGROUP=n
CONFIG_CGROUP_SCHED=n
CONFIG_CGROUP_PIDS=n
CONFIG_CGROUP_FREEZER=n
CONFIG_CGROUP_HUGETLB=n
CONFIG_CPUSETS=n
CONFIG_CGROUP_CPUACCT=n
CONFIG_CGROUP_PERF=n
CONFIG_CGROUP_BPF=n

# HACK: Remove security features with real-time latency effects.
# Unless you have aggressive latency goals you will most likely
# want these feature enabled. ;)
CONFIG_ARM64_TAGGED_ADDR_ABI=n
CONFIG_SECCOMP=n
CONFIG_STACKPROTECTOR=n
CONFIG_VMAP_STACK=n
CONFIG_GCC_PLUGINS=n
CONFIG_RANDOMIZE_BASE=n

#Disable PM features
CONFIG_HOTPLUG_CPU=n
CONFIG_CPU_IDLE=n
CONFIG_CPU_FREQ=n
CONFIG_SUSPEND=n
